
  set console -n -q log=console.txt 
; set debug -n -q debug.txt

 set cpu debug=CMD;DATA;DETAIL;EXP

echo
echo ***
echo *** Build Draugths (Oct 1952 by Christopher Strachey)
echo ***
echo *** Type in the routines code on the Offline Perforator and get 
echo *** each routine punched on PaperTape 
echo ***
echo

; prepare a routine to be loaded later at a given drum track
; use the offline Perforator to punch the routine in paper tape
; setup Perforator settings
set Perforator echo
set Perforator use_wc_k

; attach papertape to punch
att -q -n Perforator DR_Tape.pt.txt

typein line     //////CCCCCC//////
typein line     Q I DRBONE
typein line     //////
typein line     K AK @ ///# GE//  
typein routine1 Prog/DRB1-2.txt      
typein line     K VS @ //// //A/
typein line     Y
typein line     //////
typein line     Q I DRBTWO
typein line     //////
typein line     K AK @ //E# GE//     
typein routine2 Prog/DRB1-2.txt      
typein line     K VS @ //// //A/
typein line     Y
typein line     //////$$$$$$//////

typein line     //////CCCCCC//////
typein line     Q # DRBTHREE
typein line     //////
typein line     K AK @ ///# ME//  
typein routine1 Prog/DRB3.txt      
typein line     K VS @ //// //A/
typein line     Y
typein line     //////$$$$$$//////

typein line     //////CCCCCC//////
typein line     Q U DRBFOUR
typein line     //////
typein line     K AK @ ///# MEE/  
typein routine1 Prog/DRB4.txt      
typein line     K VS @ //// //A/
typein line     Y
typein line     //////$$$$$$//////

typein line     //////CCCCCC//////
typein line     Q U DRBFIVE
typein line     //////
typein line     K AK @ ///# I@//  
typein routine1 Prog/DRB5-6.txt      
typein line     K VS @ //// //A/
typein line     Y
typein line     //////
typein line     Q I DRBSIX
typein line     //////
typein line     K AK @ //E# I@//     
typein routine2 Prog/DRB5-6.txt      
typein line     K VS @ //// //A/
typein line     Y
typein line     //////$$$$$$//////

typein line     //////CCCCCC//////
typein line     Q U DRBNINE
typein line     //////
typein line     K AK @ ///# #@//  
typein routine1 Prog/DRB9-10.txt      
typein line     K VS @ //// //A/
typein line     Y
typein line     //////
typein line     Q I DRBTEN
typein line     //////
typein line     K AK @ //E# #@//     
typein routine2 Prog/DRB9-10.txt      
typein line     K VS @ //// //A/
typein line     Y
typein line     //////$$$$$$//////

typein line     //////CCCCCC//////
typein line     Q N DRCMASTERONE
typein line     //////
typein line     K AK @ ///# #///  
typein routine1 Prog/DRCMaster1-2.txt      
typein line     K VS @ //// //A/
typein line     Y
typein line     //////
typein line     Q N DRCMASTERTWO
typein line     //////
typein line     K AK @ //E# #///     
typein routine2 Prog/DRCMaster1-2.txt      
typein line     K VS @ //// //A/
typein line     Y
typein line     //////$$$$$$//////

typein line     //////CCCCCC//////
typein line     Q I DRCONE
typein line     //////
typein line     K AK @ ///# IE//  
typein routine1 Prog/DRC1-2.txt      
typein line     K VS @ //// //A/
typein line     Y
typein line     //////
typein line     Q I DRCTWO
typein line     //////
typein line     K AK @ //E# IE//     
typein routine2 Prog/DRC1-2.txt      
typein line     K VS @ //// //A/
typein line     Y
typein line     //////$$$$$$//////

typein line     //////CCCCCC//////
typein line     Q # DRCTHREE
typein line     //////
typein line     K AK @ ///# #E//  
typein routine1 Prog/DRC3-4.txt      
typein line     K VS @ //// //A/
typein line     Y
typein line     //////
typein line     Q U DRCFOUR
typein line     //////
typein line     K AK @ //E# #E//     
typein routine2 Prog/DRC3-4.txt      
typein line     K VS @ //// //A/
typein line     Y
typein line     //////$$$$$$//////

typein line     //////CCCCCC//////
typein line     Q U DRCFIVE
typein line     //////
typein line     K AK @ ///# RE//  
typein routine2 Prog/DRC5-6.txt      
typein line     K VS @ //// //A/
typein line     Y
typein line     //////
typein line     Q I DRCSIX
typein line     //////
typein line     K AK @ //E# RE//     
typein routine1 Prog/DRC5-6.txt      
typein line     K VS @ //// //A/
typein line     Y
typein line     //////$$$$$$//////

typein line     //////CCCCCC//////
typein line     Q # DRCSEVEN
typein line     //////
typein line     K AK @ ///# NE//  
typein routine1 Prog/DRC7-8.txt      
typein line     K VS @ //// //A/
typein line     Y
typein line     //////
typein line     Q # DRCEIGHT
typein line     //////
typein line     K AK @ //E# NE//     
typein routine2 Prog/DRC7-8.txt      
typein line     K VS @ //// //A/
typein line     Y
typein line     //////$$$$$$//////

typein line     //////CCCCCC//////
typein line     Q U DRCNINE
typein line     //////
typein line     K AK @ ///# YE//  
typein routine1 Prog/DRC9-10.txt      
typein line     K VS @ //// //A/
typein line     Y
typein line     //////
typein line     Q I DRCTEN
typein line     //////
typein line     K AK @ //E# YE//     
typein routine2 Prog/DRC9-10.txt      
typein line     K VS @ //// //A/
typein line     Y
typein line     //////$$$$$$//////

typein line     //////CCCCCC//////
typein line     Q J DRRECORDONE
typein line     //////
typein line     K AK @ ///# BE//  
typein routine1 Prog/DRRecord1-2.txt      
typein line     K VS @ //// //A/
typein line     Y
typein line     //////
typein line     Q J DRRECORDTWO
typein line     //////
typein line     K AK @ //E# BE//     
typein routine2 Prog/DRRecord1-2.txt      
typein line     K VS @ //// //A/
typein line     Y
typein line     //////$$$$$$//////

typein line     //////CCCCCC//////   ; Set the directory
typein line     Q D DIRECTORY
typein line     //////
typein line     K /# # //// //// //// //// //// //// //// ////   ; Store //// (zero) in
typein line     K ## # //// //// //// //// //// //// //// ////   ; tube S4 to clear it.
typein line     K T# # //// //// //// //// //// //// //// ////   ; So directory will only 
typein line     K O# # //// //// //// //// //// //// //// ////   ; contain the stored entries
typein line     K /D # //// //// //// //// //// //// //// ////   
typein line     K #D # //// //// //// //// //// //// //// ////   
typein line     K TD # //// //// //// //// //// //// //// ////   
typein line     K OD # //// //// //// //// //// //// //// ////   

typein line     K MD E GE@/    ; store entries in dir. This one is for routine DR/B 1-2 (track 58)
typein line     K GD E ME/I    ; (track 60)
typein line     K VD E MEER    ; (track 60)
typein line     K $D E I@@N    ; (track 70)
typein line     K XD E #@@/    ; (track 72)
typein line     K OD E #/@/    ; routine DR/C Master 1-2 (track 8)
typein line     K WD E IE@/    ; routine DR/C 1-2 (track 38)
typein line     K HD E #E@/    ; routine DR/C 3-4 (track 40)
typein line     K YD E REA@    ; routine DR/C 5-6 (track 42)
typein line     K PD E NE@/    ; (track 44)
typein line     K QD E YE@/    ; (track 53)
typein line     K "D E BE@/    ; (track 57)
typein line     KAK@///# EE//
typein line     K VS @ //// //A/
typein line     Y
typein line     //////$$$$$$//////

typein line     //////CCCCCC//////  ; Load in drum needed SchemeA routines
typein line     Q J ROLLCALLONE
typein line     //////
typein line     K AK @ ///# Z///     
typein routine1 ../SchemeA/Lib/ROLLCALLA.txt    
typein line     K VS @ //// //A/
typein line     Y
typein line     //////
typein line     K AK @ //E# Z///     
typein routine2 ../SchemeA/Lib/ROLLCALLA.txt    
typein line     K VS @ //// //A/
typein line     Y
typein line     Q R PAGEPRINTA
typein line     //////
typein line     K AK @ ///# P///      
typein routine  ../SchemeA/Lib/PAGEPRINTA.txt
typein line     K VS @ //// //A/
typein line     Y
typein line     Q F ROUTINEPRINTA
typein line     //////
typein line     K AK @ //E# P///      
typein routine  ../SchemeA/Lib/ROUTINEPRINTA.txt
typein line     K VS @ //// //A/
typein line     Y
typein line     //////$$$$$$//////

typein line     //////CCCCCC//////
typein line     K @C @ //L/ //W/     ; mag instr for print <cr> and <lf>
typein line     X @C/:               ; print <cr>
typein line     X AC/:               ; print <lf>
typein line     X @C/:               ; print <cr>
typein line     Q O ///LIST/DRAUGHTS/PROG///
typein line     Q O ///##/TRACKS/CHECKSUM///
typein line     X @C/: X AC/: X @C/: ; print <cr><lf><cr>
typein line     K /C @ #/// D///     ; run ROLLCALL to print checksum
typein line     K VS @ $E$T Z/@/     ; of track #/ -> routine DR/C Master 1-2
typein line     Y
typein line     K /C @ IE// R@//     ; run ROLLCALL to print checksum
typein line     K VS @ $E$T Z/@/     ; of tracks IE..#@ -> remaining routines
typein line     Y
typein line     X @C/: X AC/: X @C/: ; print <cr><lf><cr>
typein line     Q O ///##/PRINT/DIRECTORY///
typein line     X @C/: X AC/: X @C/: ; print <cr><lf><cr>
typein line     K /C E EE/#          ; store in addr /C Magnetic instruction to load directory (track 33L -> EE) into storage S4 ( -> #)
typein line     X /C/:               ; exec Mag instr at address /C -> load dir in S4
typein line     K VS @ A/@/ P/@/     ; run PAGEPRINT routine to print S4 contents
typein line     Y
typein line     Q O ///##/PRINT/ROUTINES////
typein line     X @C/: X AC/: X @C/: ; print <cr><lf><cr>
typein line     K /C @ TE// $E//     ; store dir entries to print: from routine at dir entry TE, up to dir entry $E (included)
typein line     K VS @ "A@/ P/@/     ; run ROUTINEPRINT routine 
typein line     Y
typein line     //////$$$$$$//////

typein line     //////CCCCCC//////
typein line     Q O ///RUN/DRAUGHTS/PROG////
typein line     X @C/: X AC/: X @C/: ; print <cr><lf><cr>
typein line     X @C/: X AC/: X @C/: ; print <cr><lf><cr>
typein line     K VS @ D/@C OEEZ     ; run DR/C MASTER routine 
typein line     Y
typein line     //////$$$$$$//////

det Perforator


echo
echo ***
echo *** Load Drum-Resident Scheme A 
echo ***
echo

att -n -q drum Draughts.drm

; load drum with Basic SchemeA routines
; These are protected routines -> write is disabled for
; tracks 0-3 where these routines resides

load ../SchemeA/DrumIsolated/INITIAL.txt
load ../SchemeA/DrumIsolated/INPUT_SPECIAL.txt
load ../SchemeA/DrumIsolated/PERM.txt
load ../SchemeA/DrumIsolated/ROUGHWRITE.txt

echo
echo
echo ***
echo *** Start Computer
echo *** Load and run program tape 
echo ***
echo

set cpu KEC
; Hand switches must be all be set to zero in order to load Scheme A from drum
dep H 0

go until "++INITIAL--"
go until "\n"

; set ptr echo

; attach the program tape and process it -> will load prog form tape to drum
att -q ptr DR_Tape.pt.txt

go until "LIST/DRAUGHTS"

; list on console the program, gives same output as the original listing 

go until "RUN/DRAUGHTS"

; now run the prog. Set debug if asked for
if "%1"=="DEBUG" set debug -n -q debug.txt

; the random generator will get the same sequence, so the game
; will be scriptable
set cpu repeatable_random

; run the program
go until "PLEASE READ THE INSTRUCTION CARD"

; respond operating KAC switch to go on
set cpu kac

; left tube shows position before movement
; right tube shows position after movement
set cpu Display=S5/S3

; do not punch, just print
set ptp0 disabled
set lpt0 enabled

go until "SPIN A COIN"
set cpu kac

; run the prog at fast speed (x50) sin no cpanel, 
; run at x1 if cpanel visible

set cpu speed=50.0
if "%CPANEL%"=="1" set cpu speed=1.0

go until "8 - 13"

; the program issues a hoot sound to claim user attention
; we set a one-time hoot breakpoint. The subsequent go command
; will break after exec first hoot instr. Will work as "go until hoot"
set cpu brkhoot
step -q 2500

; a hoot has been issued. SO we must now enter the user movement
; usign handswitches and KAC

; board cells 

: +---+---+---+---+---+---+---+---+
; |###| 0 |###| 1 |###| 2 |###| 3 |  |###|=back cell
: +---+---+---+---+---+---+---+---+
; | 4 |###| 5 |###| 6 |###| 7 |###|
: +---+---+---+---+---+---+---+---+
; |###| 8 |###| 9 |###| 10|###| 11|
: +---+---+---+---+---+---+---+---+
; | 12|###| 13|###| 14|###| 15|###|
: +---+---+---+---+---+---+---+---+
; |###| 16|###| 17|###| 18|###| 19|
: +---+---+---+---+---+---+---+---+
; | 20|###| 21|###| 22|###| 23|###|
: +---+---+---+---+---+---+---+---+
; |###| 24|###| 25|###| 26|###| 27|
: +---+---+---+---+---+---+---+---+
; | 28|###| 29|###| 30|###| 31|###|
; +---+---+---+---+---+---+---+---+

; a move is described giving the number of origin cell
; and destination cell. First program move from cell 8 to 
; cell 13 is printed as 8 - 13

; now we will nove from 23 to 18
;                              1     1  
; bit number in H: 01234 56789 01234 56789
;
; values for prog: 01234 01234 56789
;                  first,second digit 
;
; so to enter origin cell 23, H is set as:
;
;                  ..X.. ...X. ..... ..... 
;
; -> H=(1<<2) + (1<<3)*32 = 4 + 256 = 260 -> value to set in H
;
; then operate KAC to "enter" the value                                             


dep H 260
set cpu kac

; lets run a bit to allow processing the H setting
step -q 2500

; now enter destination cell 18

;                              1     1
; bit number in H: 01234 56789 01234 56789
;                  first,second digit 
; values for prog: 01234 01234 56789
;                  .X... ..... ...X. ..... 
;
; -> H=(1<<1) + (1<<13) = 2 + 8192 = 8194 -> value to set in H

dep H 8194
set cpu kac
step -q 2500

; to terminate the sequence, enter zero
dep H 0
set cpu kac
step -q 2500

; the program will now display in S5 the new position

; to end the turn, again H=0, then KAC
: or enter H=///T (all bits zero, except bit19=1, of dep H 524288) to repeat move

; so enter zero to let prog think its next movement
; or set H to value ///T (524288) to repeat movement
dep H 0
set cpu kac

; play a sample game

go until "5 -  8"
call move 26 23

go until "8 - 17 13"
call move 14 05

go until "7 - 14 10"
call move 24 21

go until "1 -  8  5"
call move 12 05

go until "11 - 18 15"
call move 12 05

go

echo
echo
goto end

:move
set cpu Display=S5/S3
set cpu brkhoot
go -q
call EnterPos %1
shift
if "%1"!="" goto move
; to terminate the sequence, enter zero
dep H 0
set cpu kac
step -q 2500
; enter zero again to let prog think its next movement
dep H 0
set cpu kac
return

:EnterPos
; impasse
if "%1"=="I"  call setH 16 0  0
; move to board position
if "%1"=="0"  call setH 1  1  0
if "%1"=="1"  call setH 1  2  0
if "%1"=="2"  call setH 1  4  0
if "%1"=="3"  call setH 1  8  0
if "%1"=="4"  call setH 1 16  0
if "%1"=="5"  call setH 1  0  1
if "%1"=="6"  call setH 1  0  2
if "%1"=="7"  call setH 1  0  4
if "%1"=="8"  call setH 1  0  8
if "%1"=="9"  call setH 1  0 16
if "%1"=="10" call setH 2  1  0
if "%1"=="11" call setH 2  2  0
if "%1"=="12" call setH 2  4  0
if "%1"=="13" call setH 2  8  0
if "%1"=="14" call setH 2 16  0
if "%1"=="15" call setH 2  0  1
if "%1"=="16" call setH 2  0  2
if "%1"=="17" call setH 2  0  4
if "%1"=="18" call setH 2  0  8  
if "%1"=="19" call setH 2  0 16
if "%1"=="20" call setH 4  1  0
if "%1"=="21" call setH 4  2  0
if "%1"=="22" call setH 4  4  0
if "%1"=="23" call setH 4  8  0
if "%1"=="24" call setH 4 16  0
if "%1"=="25" call setH 4  0  1
if "%1"=="26" call setH 4  0  2
if "%1"=="27" call setH 4  0  4
if "%1"=="28" call setH 4  0  8
if "%1"=="29" call setH 4  0 16
if "%1"=="30" call setH 8  1  0
if "%1"=="31" call setH 8  2  0
set cpu kac
step -q 2500
return

:setH 
set env d1=%1
set env d2=%2
set env d3=%3
set env -a Hval=d1+d2*32+32*32*d3
dep H %Hval%
return


:end
