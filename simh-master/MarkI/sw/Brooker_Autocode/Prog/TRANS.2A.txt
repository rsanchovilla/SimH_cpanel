   
     MANCHESTER UNIVERSITY COMPUTING MACHINE LABORATORY
    
     Programme Sheet B                  Date. 18.May.1955

    
    [Routine TRANS(2)      ] p10-11

    [Col  /    ]                        [     E    ]              
                                                                          
    | / | AIQO |                        | / | UNTA | similar to CE->LE                       
    | E | T@/T |                        | E | TAQO | of TRANS(1)   
    | @ | RIQO |                        | @ | DNQB |                                        
    | A | XAUP |___                     | A | FAT/ |\                                       
    | : | "AT/ |                        | : | //ZA |! call in TRANS(3)                      
    | S | @/ZA |  These instr are       | S | Z//P |/__                                     
    | I | NIT/ |  similar to line       | I | NITK |                                        
    | U | CI/J |  #/ to V/ of TRANS(1)  | U | RIQO | treat n type selectors
    | # | #/QO |                        | # | Z@UP |___                                     
    | D | KS/P |  deals with            | D | PKTA |                                        
    | R | PK/U |  y = a                 | R | JAT/ | y = a(n)                               
    | J | OK/U |                        | J | #NTA |               
    | N | BAT/ |                        | N | A:/Q |___            
    | F | #NTA |                        | F | DATC |               
    | C | KA/P |___                     | C | #NTA | y = na        
    | K | OAQO |                        | K | OIQO | examine code describing
    | T | INQB |                        | T | DAUP |___ operation  
    | Z | TST: |  There instr are    (+)| Z | @AT/ |               
    | L | NI/C |  similar to lines $/   | L | KNTA | plant instr   
    | W | $:/N |  to FE of TRANS(1)     | W | :AQO | corresponding to (+)n
    | H | PATC |                        | H | ZNQB |               
    | Y | HKTA |                        | Y | V@/P |___            
    | P | S:/N |                     (-)| P | $@T/ |                                    
    | Q | YATR |                        | Q | KNTA |                                    
    | O | /U/S |                        | O | EAQO | do. re. (-)n                     
    | B | EUTA |                        | B | ZNQB |                                    
    | G | /UT/ |                        | G | V@/P |___                                 
    | " | WATC |                     (x)| " | O@T/ |                                    
    | M | #NTA |                        | M | JNTA |               
    | X | KA/P |___                     | X | G@T/ |               
    | V | NITK |                        | V | FNTA |               
    | $ | ZATC |                        | $ | M@T/ |               
                                                                                 
    [End]

                Entry from TRANSLATE(1)

   0  //  AIQO  B7=[AI]= n/v switch for x (if = ///T -> x is va or vna)
   1  E/  T@/T  if (B>=0) goto 38

                float expression

   2  @/  RIQO  B7=[RI]=v/n count for y (=0 is a const, =1 is va variable, =2 is vna indexed var)
   3  A/  XAUP  if (B7=0) goto 4   -> y is a float constant
                       1  goto 15  -> y is va variable
                       2  goto 30  -> y is vna indexed variable

                y is float constant

   4  :/  "AT/  AL=["A]=$$// @E// -> cue to CONVERTER(SPECIAL)
   5  S/  @/ZA  Store cue in [B1]
   6  I/  NIT/  AL=[NI FI]=integral part of y
   7  U/  CI/J  AM=[CI KI]= decimal part of y
   8  #/  #/QO  B7=* 
   9  D/  KS/P  goto 173. Call RCS to link cue as sub-routine 
  10  R/  PK/U  [PK]=AL, AL=AM, AM=0 -> plant mantissa in instr matrix
  11  J/  OK/U  [OK]=AL, AL=AM, AM=0 -> plant exponent in instr matrix
  12  N/  BAT/  AL=[BA]=PAO/ OA/J 
  13  F/  #NTA  [#N]=AL -> plant instr
  14  C/  KA/P  goto 35

                y is va variable

  15  K/  OAQO  B7=[OA]=YA#:
  16  T/  INQB  [IN]=OA -> plant instr
  17  Z/  TST:  A=0
  18  L/  NI/C  D=[NI]=a/// = integral y = the variable number a
  19  W/  $:/N  Shift 
  20  H/  PATC  AL=AL+[PA]=///a /:@N -> cue to access the variable
  21  Y/  HKTA  [HK]=AL -> plant cue 
  22  P/  S:/N  AL= D*4 = a*4 -> offset of var into data track as each var uses 4 short lines
  23  Q/  YATR  AL=AL AND 127
  24  O/  /U/S  [/U]=AL -> offset into data track
  25  B/  EUTA  [EU]=AL again
  26  G/  /UT/  AL=[/U]=n/// n///
  27  "/  WATC  AL=AL+ /NO/ @N/J -> add offset to instr
  28  M/  #NTA  [#N]=AL -> plant instr
  29  X/  KA/P  goto 35

                y is vna indexed variable

  30  V/  NITK  AL=2*[NI] = integral y = the index number a
  31  $/  ZATC  AL=AL+GD#C /TQO  
  32  /E  UNTA  [UN]=AL -> plant instr
  33  EE  TAQO  B7=@J/P
  34  @E  DNQB  [DN]=B7 -> plant instr

  35  AE  FAT/  AL=[FA]=$$// IE@/ -> cue to TRANSLATE(3)
  36  :E  //ZA  Store cue in [B1]
  37  SE  Z//P  goto 177. Call RCS to link cue as ad-routine

                integer expression

  38  IE  NITK  AL=[NI]=integral part of y * 2 = 2a/// ////
  39  UE  RIQO  B7=[RI]=v/n count for y (=0 is a const, =1 is na index)
  40  #E  Z@UP  if (B7=0) goto 41 -> y is an integer constant
                       1  goto 45 -> y is an index

                y is a const  

  41  DE  PKTA  [PK]=AL -> plant const
  42  RE  JAT/  AL=PAO/ IIOA
  43  JE  #NTA  [#N] -> plant instr
  44  NE  A:/Q  goto 47

                y is na index 

  45  FE  DATC  AL=AL+GDO/ IIOA
  46  CE  #NTA  [#N] -> plant instr to get index value
 
  47  KE  OIQO  B7=[OI]=num for main op (-1 add, -2 sub, -3 mult, -4 div)
  48  TE  DAUP  if (B7=-1) goto 49 -> perform integer addition
                   (B7=-2) goto 54 -> perform integer substraction
                   (B7=-3) goto 59 -> perform integer multiplication
                   (B7=-4) goto 66 -> perform integer division

                addition
  49  ZE  @AT/  AL=[@A]:IT# IITC
  50  LE  KNTA  [KN]=AL -> plant instr
  51  WE  :AQO  B7=[:A]=:IOA
  52  HE  ZNQB  [ZN]=B7 -> plant instr
  53  YE  V@/P  goto 70

                subtraction
  54  PE  $@T/  AL=[$@]=:IT# IITN
  55  QE  KNTA  [KN]=AL -> plant instr
  56  OE  EAQO  B7=[EA]=:IOA
  57  BE  ZNQB  [ZN]=B7 -> plant instr
  58  GE  V@/P  goto 70

                multiplication
  59  "E  O@T/  AL=[O@]=:I#K II/F
  60  ME  JNTA  [JN]=AL -> plant instr
  61  XE  G@T/  AL=[G@]=:IIOA II#K
  62  VE  FNTA  [FN]=AL -> plant instr
  63  $E  M@T/  AL=[M@]=:S/N :I#A
  64  /@  KNTA  [KN]=AL -> plant instr
  65  E@  V@/P  goto 70

                division   
  66  @@  Y@T/  AL=[Y@]=#A/J /TQO
  67  A@  KNTA  [KN]=AL
  68  :@  Q@QO  B7=[Q@]=FS#P
  69  S@  ZNQB  [ZN]=B7

  70  I@  W@T/  AL=@/// UE@/ -> cue to TRANSLATE(4)
  71  U@  //ZA  Store cue in [B1]
  72  #@  Z//P  goto 177. Call RCS to link to cue as ad-routine

  73  D@        
  74  R@        
  75  J@        
  76  N@        
  77  F@        
  78  C@        
  79  K@        
  80  T@  SE//  
  81  Z@  #E//  
  82  L@  NE//  
  83  W@  @///  
  84  H@  UE@/  
  85  Y@  #A/J  
  86  P@  /TQO  
  87  Q@  FS#P  
  88  O@  :I#K  
  89  B@  II/F  
  90  G@  IIOA  
  91  "@  II#K  
  92  M@  :S/N 
  93  X@  :I#A  
  94  V@  S@//  
  95  $@  :IT#  
  96  /A  IITN  
  97  EA  :IOA  
  98  @A  :IT#  
  99  AA  IITC  
 100  :A  :IOA  
 101  SA  E@//  
 102  IA  GE//  
 103  UA  YE//  
 104  #A  TE//  
 105  DA  GDO/  
 106  RA  IIOA  
 107  JA  PAO/  
 108  NA  IIOA  
 109  FA  $$//  
 110  CA  IE@/  
 111  KA  @E//  
 112  TA  @J/P  
 113  ZA  GD#C  
 114  LA  /TQO  
 115  WA  /NO/  
 116  HA  @N/J  
 117  YA  $A//  
 118  PA  ////  
 119  QA  /:@N  
 120  OA  YA#:  
 121  BA  PAO/  
 122  GA  OA/J  
 123  "A  $$//  
 124  MA  @E//  
 125  XA  A///  
 126  VA  C///  
 127  $A  X///  
