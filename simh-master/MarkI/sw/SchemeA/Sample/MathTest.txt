A/MATHTEST                        Date. 15.12.2022

    Purpose: To test input routines, output routines, 
             and math routines
            
    Cue: / / / / R / @ /    
             
    Principal lines: [/E] = / / / /
                     [/A] = / / / / 
                     
    Magnetic Storage: variable      Electronic Storage: S0 S1
    
    Stores Altered:  
    
    Effects: Calls INPUT C to read 4 signed fractions from
             papertape. Add the 4 values and store the 
             result in [/C]

    
    [Routine ROUTINE       ] 

    [Col /          E ]                 [Col @          A ]              
                                                                          
    |      | / | //// |                 |      | / | //// |                                         
    | VFTA | E |      |                 |      | E | //R/ |  cue for ...
    | EAT/ | @ |      |                 |      | @ | XEEZ |  ... INPUT D                                      
    | VSTA | A |      |                 |      | A | #F// |  addr to store input values
    | AAPO | : |      |                 |      | : | I/// |  return link ...                                      
    | :AT/ | S |      |                 |      | S | R/@/ |  ... from INPUT D                        
    | NS/P | I |      |                 |      | I | ME// |  const goto 61 (exit to caller)
    | $$$$ | U |      |                 |      | U |      |               
    | #FT/ | # |      |                 |      | # |      |                                        
    | IFTI | D |      |                 |      | D |      |                                        
    | :FTI | R |      |                 |      | R |      |                                        
    | @FTI | J |      |                 |      | J |      |               
    | /FTI | N |      |                 |      | N |      |               
    | :CTA | F |      |                 |      | F |      |               
    | IA/P | C |      |                 |      | C |      |               
    |      | K |      |                 |      | K |      |               
    |      | T |      |                 |      | T |      |               
    |      | Z |      |                 |      | Z |      |               
    |      | L |      |                 |      | L |      |               
    |      | W |      |                 |      | W |      |               
    |      | H |      |                 |      | H |      |               
    |      | Y |      |                 |      | Y |      |               
    |      | P |      |                 |      | P |      |                                    
    |      | Q |      |                 |      | Q |      |                                    
    |      | O |      |                 |      | O |      |                                    
    |      | B |      |                 |      | B |      |                                    
    |      | G |      |                 |      | G |      |                                    
    |      | " |      |                 |      | " |      |                                    
    |      | M |      |                 |      | M |      |               
    |      | X | VFT/ |                 |      | X |      |               
    |      | V | VSTA |                 |      | V |      |               
    |      | $ | NS/P |                 |      | $ |      |               
                                                                          
    Tape: ROUTINE ONE                   Tape: ROUTINE TWO
    Destination Sequence: KAK@///R/@/   Destination Sequence: KAK@//E#R/@/
        
    [End]

   0  //  
   1  E/  VFTA  Store return link in [VF]                                    
   2  @/  EAT/  load INPUT D cue                                             
   3  A/  VSTA  set as cue to be called                                      
   4  :/  AAPO  B6=#F// addr where to store input data read from ptr         
   5  S/  :AT/  AL=return cue                                                
   6  I/  NS/P  call RCS -> call INPUT A                                     
   7  U/  $$$$  dummy instr                                                            
   8  #/  #FT/  AL=[#F]=first fraction read by INPUT D
   9  D/  IFTI  AL=AL+[IF]=second value read
  10  R/  :FTI  AL=AL+[:F]
  11  J/  @FTI  AL=AL+[@F]
  12  N/  /FTI  AL=AL+[/F]=last value read
  13  F/  :CTA  [:C]=AL store result
  14  C/  IA/P  exit routine                                                             

