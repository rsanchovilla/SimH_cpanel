A/INPUT                          Date.   1.7.51

    Purpose: To read from tapes
             
    Cues: J @ L V A / @ /

    Principal Lines: [/E] = A / @ /
                     [/A] = A E K /  on entry and after entry
                          = R / / :  otherwise            
             
    Magnetic Storage: 2L 2R 3L 3R

    Electronic Storage: S0 S1

    Stores Altered:   BK   B4 B5 B6
    
    Effects: Enter either (1) by cue,
                       or (2) by setting [H]=A/// and
                              operating KEC
                          (3) Through INITIAL by      
                              operating KEC with 
                              [H]=////
             For details of the effects of the various
             warning chars see the Programmers' Handbook
             pp 34-36 [First Edition, from 1950]
                 
    Library Progs 
    Bodleian Special Collection (https://www.bodleian.ox.ac.uk/)
    MS. Eng. misc. b. 260-C.43.pdf
    p41
    
    [Routine INPUT    ] 
    
    [Col / E  Track 3L]                 [Col @ A  Track 3R]      
                                        
    | /E// | / | A/@/ |                 | R//: | / | AEK/ |    
    | /E// | E | //T: |                 | VK/A | E | AE// | 
    | /E// | @ | TE/J |                 | Y:/C | @ | AE// |             
    | /E// | A | "E/P |                 | VK/N | A | AE// |             
    | /E// | : | $KTB | <-digit         | VK/A | : | AE// |             
    | /E// | S | VKT/ |                 | VKHO | S | AE// |             
    | /E// | I | ZE/C |         (* DSYO)| VKYO | I | AE// |             
    | /E// | U | MK/N |                 | C@T: | U | AE// | 
    | /E// | # | MKTA |                 | B@/P | # | AE// |             
    | /E/: | D | R//: |             --> | MKTF | D | AE// |             
    | /EO/ | R | VK/E |                 | U@/P | R | L@// |             
    | Y@/: | J | J:/C |                 | @/E@ | J | L@// | 
    | /ET: | N | VK/N |                 | VSTA | N | L@// | 
    | /ET$ | F | VK/A |                 | ///P | F | L@// | 
    | /ET$ | C | VKPO |             +-> | MKT# | C | L@// | 
    | X@/: | K | /AIP |         (* JSYG)| W:YG | K | L@// | 
    | /ET$ | T | /X$$ |                 | KS/T | T | L@// | 
    | LET$ | Z | R/// |                 | //HA | Z | L@// | 
    | /ET$ | L | //// |                 | ///P | L | L@// | 
    | CET$ | W | HKT/ | <-Z             | JSYO | W | L@// | 
    | /ET$ | H | NS/P |                 | /A/P | H | L@// | 
    | OET$ | Y | /#YB |                 | E//: | Y | L@// | 
    | /ET$ | P | /DHB |             J-> | J@/: | P | F@// |         
    | Q@T$ | Q | J@LV |                 | @//@ | Q | L@// |         
    | /ET$ | O | A/@/ |             Q-> | Q@/: | O | L@// |         
    | /ET$ | B | QET/ | <-Y             | UE// | B | L@// |         
    | /ET$ | G | NS/P |             "-> | "ET$ | G | L@// |         
    | B@T$ | " | #E/E |                 | G@/P | " | L@// |         
    | /ET$ | M | R//: | <-"         X-> | J@/: | M | #@// | 
    | "@T$ | X | VK/A |                 | E/EK | X | L@// | 
    | /ET$ | V | V:/C |             K-> | Q@/: | V | L@// | 
    | /ET: | $ | VK/N |                 | //// | $ | /E// | 

    Tape: INPUT ONE SPECIAL             INPUT TWO SPECIAL
    
    [Col @ A  Track 2L]                 [Col @ A  Track 2R]
                                                           
 Q->| YE/: | / | R//: |                 | :@/S | / | R//: |
    | M@/J | E | VK/A |                 | $KHO | E | VK/A |
  CR| QE/: | @ | VK/N |                 | E:/M | @ | VK/N |
  LF| X@/: | A | R//: |                 | ///P | A | R//: |
PrtQ| O@/: | : | VK/A |                 | //// | : | VK/A |
    | //T: | S | VK/N |                 | //// | S | VK/N |
    | R//: | I | VK/A |                 | ///P | I | R//: |
Prtn| O@/: | U | VK/N |                 | V@// | U | VK/A |
    | VK/A | # | VK/A |             X-> | V:/C | # | VK/N |
    | R:/C | D | R//: |                 | J@QO | D | R//: |
    | VK/N | R | $KPO |                 | R//: | R | VK/A |
    | VK/A | J | VK/A |                 | VK/A | J | $KYO |
    | $KQO | N | $KYO |                 | VK/N | N | ///C |
    | BKQB | F | R//: |                 | $:QG | F | R//: |
    | E:QG | C | VK/A |                 | P@/T | C | VK/A |
    | E:QG | K | VK/N |                 | $KQO | K | VK/N |
    | R//: | T | DSPG |                 | HKT/ | T | VK/U |
    | O@/: | Z | R//: |                 | PK/J | Z | R//: |
    | //T: | L | VK/A |                 | //U/ | L | V:/C |
    | V@/T | W | VK/N |                 | HK/U | W | VK/A |
    | ///P | H | R//: |                 | PK/U | H | VK/N |
    |      | Y | VK/A |                 | ///P | Y | R//: |
    | "@/: | P | VK/N |             J-> | D@T$ | P | VK/A |
    | @/E@ | Q | R//: |                 | U@/P | Q | VK/N |
    | $ET$ | O | VK/A |             Q-> | B@/: | O | R//: |
 Q->| O@/P | B | $KQO |                 | @//@ | B | VK/A |
 T->| /E/: | G | $$PZ |             "-> | /E/: | G | VK/N |
    | @/E@ | " | "EYG |                 | $E// | " | R//: |
 X->| Q@/: | M | X@/T |                 | U@T$ | M | VK/A |
    | NAWQ | X | ///P |             X-> | M@/P | X | R//: |
    | C@T$ | V |      |             K-> | B@/: | V | YETI |
 K->| V:/C | $ |      |             J-> | V:/C | $ | "@/P |

    Tape: INPUT THREE SPECIAL           INPUT FOUR SPECIAL

    [End]

Warning Chars

Q c abc..e              print/punch c chars a..e as text
K ab c aaaa bbbb ...	[ab]=aaaa, [ab+1]=bbbb ... [ab+c]=eeee. if c=/, enter 32 values
J abcd c fghi J		[#c]=abcd, [Dc]=fghi (=set a long line in Storage tube 4)
Y                       call routine which cue is in [VS] via RCS, then return to INPUT
W			Dynamic stop at addr 0047
X abcd			AM=[HK, YK], AL=[PK, QK], exec instr abcd
" ab nnnn P|M|+|-	enter decimal number in addr: [ab, ab+1]=nnnn, where n=0..9 
Z			goto RCS to exec routine which cue in [VS]. [HK, YK] should contain the return link

                        the char / and C works as no-operation 

(*) Note by Roberto Sancho: there is a BUG in the original listing, that 
makes " warning char to allways call hoot, as if the address given 
is out of range (>=512).
It is possible that this bug has passed undetected, as " warning char should
have been deprecated early by more advanced INPUT rutines for numerical input.
The fix is to replace original intruction DSYO by VKYO, and original 
instruction JSYG by W:YG (see details in annotated program listing)

		
; Annotated program
; Addr = addr into Storage when executing
; Tr   = Track this prog comes from

;=Tr= =Addr=  Data  
  3L  0   //  /E//  
      1   E/  /E//  
      2   @/  /E//
      3   A/  /E//
      4   :/  /E//
      5   S/  /E//
      6   I/  /E//
      7   U/  /E//
      8   #/  /E//
      9   D/  /E/:
     10   R/  /EO/  const: Mag instr O -> read ptr
     11   J/  Y@/:  const: tr to J handling 
     12   N/  /ET:
     13   F/  /ET$
     14   C/  /ET$
     15   K/  X@/:  const: tr to K handling 
     16   T/  /ET$
     17   Z/  LET$  const: tr to Z handling  
     18   L/  /ET$
     19   W/  CET$  const: tr to W handling 
     20   H/  /ET$
     21   Y/  OET$  const: tr to Y handling 
     22   P/  /ET$
     23   Q/  Q@T$  const: tr to Q handling -> goto 0088
     24   O/  /ET$
     25   B/  /ET$
     26   G/  /ET$
     27   "/  B@T$  const: tr to " handling 
     28   M/  /ET$
     29   X/  "@T$  const: tr to X handling 
     30   V/  /ET$
     31   $/  /ET:
     
     32   /E  A/@/  Principal line: used to form CK value for cue
     33   EE  //T:  Enter here from end of Q, J processing: A=0
     34   @E  TE/J  Enter here from INITIAL: AM=/X$$ R///
     35   AE  "E/P  goto addr 41
     36   :E  $KTB  [$K]=0
     37   SE  VKT/  A=[VK, $K]=digit 
     38   IE  ZE/C  D=10
     39   UE  MK/N  A+=D*S -> [AL]=number entered from X warning char
     40   #E  MKTA  [MK, Xk]=AL=number read so far
     41   DE  R//:  Read PTR warning char 'Q'=23, 'K'=15, 'J'=11, 'Y'=21
     42   RE  VK/E  Store char [VK,$K]=AM=/X$$ R//Q
     43   JE  J:/C  D=/E// ////
     44   NE  VK/N  A+=D*S -> lower 5 bits of AM=Q
     45   FE  VK/A  [VK,$K]=AM=QX$$ R//Q -> lower 5 bits of [VK]=read char
     46   CE  VKPO  B6=QX$$ -> lower 5 bits of B6=read char
     47   KE  /AIP  goto [lower 5 bits of B6=read warning char] 
                       char 'Q' ->[Q/] -> Q@ -> goto 0088
                            'K'              -> goto 2L 0094
                            'J'              -> goto 2L 0086
                            'Y'              -> goto 0057
                            '/','C'          -> goto 0033
                            'W'              -> goto 0047
                            'X'              -> goto 0092
                            '"'              -> goto 0090
                            '0'..'9'         -> goto 36
                            'P','+'          -> goto 78
                            'M', '-'         -> goto 73
                            'Z'              -> goto 51

     48   TE  /X$$  const for jump table ...
     49   ZE  R///  const .. on char read from ptr
     50   LE  ////
     51   WE  HKT/  Z Entry: AL=[HK] 
     52   HE  NS/P  Z: goto RCS into PERM
     53   YE  /#YB  const Printer set letter shift, const for inst to be se in :@, ...
     54   PE  /DHB  const ... and S@ on J processing
     55   QE  J@LV  const for Y
     56   OE  A/@/
     57   BE  QET/  Y: AL=J@LV A/@/, AM=0 (AL=the cue)
                          J@=return addr-1 from perm -> so instr 58 will return to J@+1=N2=addr 76)
                          A/@/=mag instr to reload 3L into S0 and 3R into S1=reload this routine
     58   GE  NS/P  Y: goto RCS into PERM 
     59   "E  #E/E  const 
     60   ME  R//:  ": Read PTR (first digit of addr to store the number)
     61   XE  VK/A  ": 
     62   VE  V:/C  ": 
     63   $E  VK/N  ": 

 3R  64   /@  R//:  ": Read PTR (second digit of addr to store the number)
     65   E@  VK/A  ":   
     66   @@  Y:/C  ": 
     67   A@  VK/N  ": 
     68   :@  VK/A  ": [VB]=AB// [$K]=0 (AB=addr to store the number)
     69   S@  VKHO  ": B4=AB//
     70   I@  VKYO  ": B5=AB//   (instead of original DSYO -> B5=$$$$=-1)
     71   U@  C@T:  ": A=0 the number read so far
     72   #@  B@/P  ": goto 40
     73   D@  MKTF  M Entry: A=-S=-number for X warning char 
     74   R@  U@/P  M: goto 79
     75   J@  @/E@  const
     76   N@  VSTA
     77   F@  ///P
     78   C@  MKT#  P Entry: AL=number for X warning char 
     79   K@  W:YG  P: B=B-512 (instead of original instr: JSYG B=B-0): check if addr to store num is out of mem
     80   T@  KS/T  P: if B>= 0 goto 172 (hoot)
     81   Z@  //HA  [B4]=AL=number for X warning char 
     82   L@  ///P  goto 33: clear A, read next warning char
     83   W@  JSYO
     84   H@  /A/P
     85   Y@  E//:
     86   P@  J@/: 
     87   Q@  @//@  Q: const for MagInst Track 2L to Tube S1
     88   O@  Q@/:  Q: Load Track 2L as overlay to Tube S1, continue to addr 2L 0089
     89   B@  UE//
     90   G@  "ET$  ": dummy
     91   "@  G@/P  ": goto 60
     92   M@  J@/:  X: Load Track 2R as overlay to Tube S1, continue to addr 2R 0093
     93   X@  E/EK
     94   V@  Q@/:  
     95   $@  ////
     
 2L  64   /@  YE/:  Q Entry: Printer set letter shift
 2L  65   E@  M@/J  Q: AM=[M@,X@]
 2L  66   @@  QE/:  Q: Print CR 
 2L  67   A@  X@/:  Q: Print LF 
 2L  68   :@  O@/:  Q: Print 'Q'
 2L  69   S@  //T:  Q: Clear Acc 
 2L  70   I@  R//:  Q: read PTR -> ':' -> the number of chars to punch in MSB of AM = len
 2L  71   U@  O@/:  Q: Print len (MSB of AM)
 2L  72   #@  VK/A  Q: [VK, $K]=//// ///: = len, A=0 
 2L  73   D@  R:/C  Q: D=//// /E// 
 2L  74   R@  VK/N  Q: A+=D*[VK] -> AM=//// :/// 
 2L  75   J@  VK/A  Q: [VK]=////, [$K]=:///, A=0 
 2L  76   N@  $KQO  Q: B7=[$K]=len=4 
 2L  77   F@  BKQB  Q: [BK]=B7
 2L  78   C@  E:QG  Q: decr B7 
 2L  79   K@  E:QG  Q: PtrLoop: decr B7: loop to read&print len chars from PTR
 2L  80   T@  R//:  Q: read PTR -> 'T' in MSB of AM
 2L  81   Z@  O@/:  Q: print char  
 2L  82   L@  //T:  Q: A=0 
 2L  83   W@  V@/T  Q: if (B>=0) goto 79 PrtLoop
 2L  84   H@  ///P  Q: goto 0033 
 2L  85   Y@  ////  
 2L  86   P@  "@/:  J: Load Track 2R as overlay to Tube S1, continue to addr 2R 0087
 2L  87   Q@  @/E@  
 2L  88   O@  $ET$  const for Q Entry
 2L  89   B@  O@/P  Q: goto Q Entry at 2L 0064 + const print MSB of AM
 2L  90   G@  /E/:  
 2L  91   "@  @/E@  
 2L  92   M@  Q@/:  Const 'Q' in MSB of AM 
 2L  93   X@  NAWQ  const Print CR
 2L  94   V@  C@T$  const Print LF, const goto 79, nop
 2L  95   $@  V:/C  K: D=//// ///E
 2L  96   /A  R//:  K: Read PTR addr_lo = 'A'. Principal line: used to form CK value for cue
 2L  97   EA  VK/A  K: [VK]=0, [$K]=///A = addr_lo
 2L  98   @A  VK/N  K: A=+D*S -> AM=//A/
 2L  99   AA  R//:  K: Read PTR addr_hi = 'K' -> AM=//AK
 2L 100   :A  VK/A  K: [VK]=0, [$K]=//AK
 2L 101   SA  VK/N  K: A=+D*S 
 2L 102   IA  VK/A  K: [VK]=0, [$K]=/AK/
 2L 103   UA  VK/N  K: A=+D*S 
 2L 104   #A  VK/A  K: [VK]=0, [$K]=AK// (483)
 2L 105   DA  R//:  K: Read PTR addr_lo = '@' = 2 =num of values to store
 2L 106   RA  $KPO  K: B6=AK// = addr to store to
 2L 107   JA  VK/A  K: [VK]=0, [$K]=///@
 2L 108   NA  $KYO  K: B5=///@ (65536)
 2L 109   FA  R//:  K: NextValue: Read PTR chr0='/' read first char of value
 2L 110   CA  VK/A  
 2L 111   KA  VK/N  
 2L 112   TA  DSPG  K: B6=B6-(-1) = 484 Incr destination address 
 2L 113   ZA  R//:  K: Read PTR chr1='/' read second char of value
 2L 114   LA  VK/A  
 2L 115   WA  VK/N  
 2L 116   HA  R//:  K: Read PTR chr2='/'
 2L 117   YA  VK/A  
 2L 118   PA  VK/N  
 2L 119   QA  R//:  K: Read PTR chr3='#'
 2L 120   OA  VK/A  
 2L 121   BA  $KQO  K: B7=[$K]=///#  B7=value to store
 2L 122   GA  $$PZ  K: [B6-1]=B7     Store the value into dest address [B6-1]
 2L 123   "A  "EYG  K: B5=B5-...E    Decr number of values remaining to be stored
 2L 124   MA  X@/T  K: if B>=0 goto 0109 NextValue
 2L 125   XA  ///P  K: goto 0033
 2L 126   VA  ////  
 2L 127   $A  ////  

 2R  64   /@  :@/S  J: save instr to exec from acc: [:@]=/#YB, [S@]=/DHB 
 2R  65   E@  $KHO  J: B4=[right col value]
 2R  66   @@  E:/M  J: if A>=0 goto 0068 (instr :@ previously set)
 2R  67   A@  ///P  
 2R  68   :@  ////  J: exec /#YB -> [S4L + dest addr = 256+dest]=B5=left value 
 2R  69   S@  ////  J: exec /DHB -> [S4R + dest addr = 288+dest]=B4=right value  
 2R  70   I@  ///P  J: goto 0033 
 2R  71   U@  V@//  const for goto J Entry 
 2R  72   #@  V:/C  X: D=//// ///E 
 2R  73   D@  J@QO  X: B7=...A (A=code 3)
 2R  74   R@  R//:  X: ReadCharLoop Read PTR char 'A' 
 2R  75   J@  VK/A  X: [VK]=//// [$K]=ABCD <- the instr given after X warning char
 2R  76   N@  VK/N  X: acc shift 5 bits (MSB are now zero) 
 2R  77   F@  $:QG  X: decr B7 (B7=B7-///E) (E=code 1) 
 2R  78   C@  P@/T  X: goto 74 ReadCharLoop 
 2R  79   K@  $KQO  X: B7=ABCD the instr to exec
 2R  80   T@  HKT/  X: Set up acc prior to instr exec: AL=[HK] 
 2R  81   Z@  PK/J  X:                                 AM=[PK] 
 2R  82   L@  //U/  X: exec B7 contents as an instr 
 2R  83   W@  HK/U  X: save resulting AL in [HK] 
 2R  84   H@  PK/U  X:                AM in [PK] 
 2R  85   Y@  ///P  X: goto 33, process next warning char
 2R  86   P@  D@T$  const 
 2R  87   Q@  U@/P  J: goto J Entry at addr 0095
 2R  88   O@  B@/:   
 2R  89   B@  @//@   
 2R  90   G@  /E/:   
 2R  91   "@  $E//  const goto 0064 on J processing
 2R  92   M@  U@T$   
 2R  93   X@  M@/P  X Entry: goto 72
 2R  94   V@  B@/:   
 2R  95   $@  V:/C  J Entry: D=//// ///E
     
 2R  96   /A  R//:  J: Read PTR  (':' code 4)  = chr0 of left col value. Principal line: used to form CK value for cue
 2R  97   EA  VK/A  J: 
 2R  98   @A  VK/N  J: 
 2R  99   AA  R//:  J: Read PTR chr1 of left col value
 2R 100   :A  VK/A  J: 
 2R 101   SA  VK/N  J: 
 2R 102   IA  R//:  J: Read PTR chr2 of left col value
 2R 103   UA  VK/A  J: 
 2R 104   #A  VK/N  J: 
 2R 105   DA  R//:  J: Read PTR chr3 of left col value
 2R 106   RA  VK/A  J: 
 2R 107   JA  $KYO  J: B5=[left col value]
 2R 108   NA  ///C  J: D=/E// /E//
 2R 109   FA  R//:  J: Read PTR chr = LSB of line address 
 2R 110   CA  VK/A  J: 
 2R 111   KA  VK/N  J: 
 2R 112   TA  VK/U  J: 
 2R 113   ZA  R//:  J: Read PTR chr0 of right col value
 2R 114   LA  V:/C  J:  
 2R 115   WA  VK/A  J: 
 2R 116   HA  VK/N  J: 
 2R 117   YA  R//:  J: Read PTR chr1 of right col value
 2R 118   PA  VK/A  J: 
 2R 119   QA  VK/N  J: 
 2R 120   OA  R//:  J: Read PTR chr2 of right col value
 2R 121   BA  VK/A  J: 
 2R 122   GA  VK/N  J: 
 2R 123   "A  R//:  J: Read PTR chr3 of right col value
 2R 124   MA  VK/A  J: [$K]=right col value
 2R 125   XA  R//:  J: Read PTR chr -> must be ending 'J'
 2R 126   VA  YETI  J: Set Acc with instr to be saved in :@ and S@  
 2R 127   $A  "@/P  J: goto 3R 0064


            