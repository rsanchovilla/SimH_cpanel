   
Based on INPUT/B routine from Scheme B
    
    [Routine INPUT/B     ] 
    
    [Col /          E ]      
                                    
    | Q/// | / | WET: |                                           
    | $$$$ | E | OEPO | 
    | $$O: | @ | PEPB |                                          
    | $$$$ | A | E:/C |                                          
    | //QO | : | X$O$ |                                          
    | "//P | S | BE/C |                                          
    | XE/: | I | @//N |                                          
    | CE/M | U | I//U |  
    | "/PO | # | ://N |                                          
    | I/PB | D | "E/C |                                          
    | E:PO | R | @//N |                                          
    | X$O$ | J | #//U | 
    | "//A | N | ://N | 
    | ///A | F | @//U | 
    | ///C | C | S//U | 
    | J:/N | K | D:/C | 
    | VE/C | T | S//N | 
    | ://N | Z | :/TA | 
    | A//I | L | #//N | 
    | @//N | W | #//U | 
    | @//U | H | @//N | 
    | ://U | Y | ://J | 
    | E:QG | P | DSTJ |                                      
    | CE/T | Q | E:TC |                                      
    | $$$$ | O | NS/P |                                      
    | $$$$ | B | QFXC |                                      
    | L//Q | G | @SRL |                                      
    | W/T: | " | Y:/H |                                      
    | XE/: | M | BPSO | 
    | XE/M | X | X$O$ | 
    | /:YG | V | R/// | 
    | L//O | $ | //// | 
          
          
    [End]
     
    on entry, B5= 1 -> make result negative, 
                 -1 -> keep positive result

    0  //  Q///  const
    1  E/  $$$$  Entry point
    2  @/  $$O:  clear acc
    3  A/  $$$$
    4  :/  //QO  Entry point, input integer: B7=23 
    5  S/  "//P  goto 20

    6  I/  XE/:  Read PTR
    7  U/  CE/M  if (AM>=0) goto 13 (will be <0 on reading +, - or $ char)
    8  #/  "/PO  patch read PTR instr on addr 6 ...
    9  D/  I/PB  ... to be clear Acc
   10  R/  E:PO  B6=1
   11  J/  X$O$  
   12  N/  "//A  ["/]=AM <- save sign //// ///P or //// ///M
   13  F/  ///A  save read digit char [//]=AM=...n, AM=0
   14  C/  ///C  D=//// ///n, n=0..9 the read-from-ptr digit
   15  K/  J:/N  Shift -> AL=0, AM=n
   16  T/  VE/C  D=10
   17  Z/  ://N  A=A+10*[:/] -> AM=digit + 10*value in [:/]
   18  L/  A//I  Swap AM<->AL
   19  W/  @//N  A=A+10*[@/]
   20  H/  @//U  [@/]=AL, AL=AM, AM=Clear \ save full acc in @/ A/ :/ S/
   21  Y/  ://U  [:/]=AL, AL=AM, AM=Clear /
   22  P/  E:QG  decr B7
   23  Q/  CE/T  if (B>=0) goto 6
   24  O/  $$$$
   25  B/  $$$$
   26  G/  L//Q  goto 30
   27  "/  W/T:  
   28  M/  XE/:  
   29  X/  XE/M  
   30  V/  /:YG  B5=B5-0
   31  $/  L//O  if (B>=0) goto 35 -> goto taken for B5=0 -> change sign
   32  /E  WET:  clear acc
   33  EE  OEPO  patch addr 54 with ...
   34  @E  PEPB  ... NS/P to return to caller
   35  AE  E:/C  D=1
   36  :E  X$O$  
   37  SE  BE/C  D=QFXC @SRL
   38  IE  @//N  
   39  UE  I//U  
   40  #E  ://N  
   41  DE  "E/C  
   42  RE  @//N  
   43  JE  #//U  
   44  NE  ://N  
   45  FE  @//U  
   46  CE  S//U  
   47  KE  D:/C  
   48  TE  S//N  
   49  ZE  :/TA  
   50  LE  #//N  
   51  WE  #//U  
   52  HE  @//N  
   53  YE  ://J  AL,AM=80 bit fract read from PTR
   54  PE  DSTJ  return to caller
   55  QE  E:TC  
   56  OE  NS/P  
   57  BE  QFXC  const 
   58  GE  @SRL  
   59  "E  Y:/H  
   60  ME  BPSO  
   61  XE  X$O$  
   62  VE  R///  
   63  $E  ////  
                 
