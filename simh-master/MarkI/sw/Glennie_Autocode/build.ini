
  set console -n -q log=console.txt 
; set debug -n -q debug.txt

; set cpu debug=CMD;DATA;DETAIL;EXP

echo
echo ***
echo *** Build A.Glennie Autocode (1952)
echo ***
echo *** Type in the routines code on the Offline Perforator and get 
echo *** each routine punched on PaperTape 
echo ***
echo

; prepare a routine to be loaded later at a given drum track
; use the offline Perforator to punch the routine in paper tape
; setup Perforator settings
set Perforator echo
set Perforator use_wc_k

; attach papertape to punch
att -q -n Perforator Tapes/GAutoCode.pt.txt

typein line     //////CCCCCC///////

; add name as word for easy visual location (exactly 12 chars)
typein line     K /# A INPUT/ONE///

; punch the directory entry for routine: K /# @ <cue1 cue2>
; cue is composed of two 20bits words
;     cue1 -> nn// -> indicates the entry point (routine prog starts at nn+1 address)
;     cue2 -> ttcc -> tt is the track number
;                     cc is // if routine stored on Left half-track, and loaded back to cols /E
;                           /@ if routine stored on Left half-track, and loaded back to cols @A 
;                           E/ if routine stored on Right half-track, and loaded back to cols /E
;                           @/ if routine stored on Full track, and loaded back to cols /E @A 
typein line     K /# @ $$// F/@/        ; store in track 13LR (chars F/) loads in cols /E @A 
; then save this as directory entry // to store it in drum 
typein line     YTP
; proper punch. Will load the routine in S4 S5 using warning char K
typein routine1 Prog/INPUT.1.txt  S4
typein routine2 Prog/INPUT.1.txt  S5
; then save routine from to destination track set in directory entry //
typein line     Y//
; call Z warning char so computer will stop if /G switch is on. Press prepulse key to go on
typein line     Z
; leave some blank tape at the end
typein line     $$$$$$//////

typein line     //////CCCCCC///////
typein line     K /# A INPUT/TWO///
typein line     K /# @ $$// C/@/        ; store in track 14LR (chars C/) loads in cols /E @A 
typein line     YTP
typein routine1 Prog/INPUT.2.txt  S4
typein routine2 Prog/INPUT.2.txt  S5
typein line     Y//
typein line     Z
typein line     $$$$$$//////

typein line     //////CCCCCC///////
typein line     K /# A INPUT/THREE/
typein line     K /# @ $$// T/@/        ; store in track 16LR (chars T/) loads in cols /E @A 
typein line     YTP
typein routine1 Prog/INPUT.3.txt  S4
typein routine2 Prog/INPUT.3.txt  S5
typein line     Y//
typein line     Z
typein line     $$$$$$//////

typein line     //////CCCCCC///////
typein line     K /# A INPUT/FOUR//
typein line     K /# @ $$// N/@/        ; store in track 12LR (chars N/) loads in cols /E @A 
typein line     YTP
typein routine1 Prog/INPUT.4.txt  S4
typein routine2 Prog/INPUT.4.txt  S5
typein line     Y//
typein line     Z
typein line     $$$$$$//////

typein line     //////CCCCCC///////
typein line     K /# A INPUT/FIVE//
typein line     K /# @ $$// R///        ; store in track 10L (chars R/) loads in cols /E
typein line     YTP
typein routine1 Prog/INPUT.8.txt  S4
typein line     Y//
typein line     Z
typein line     $$$$$$//////

typein line     //////CCCCCC///////
typein line     K /# A INPUT/SIX///
typein line     K /# @ $$// R/E/        ; store in track 10R (chars R/) loads in cols CK
typein line     YTP
typein routine1 Prog/INPUT.9.txt  S4
typein line     Y//
typein line     Z
typein line     $$$$$$//////

typein line     //////CCCCCC///////////
typein line     K /# : TRANSLATE/ONE///
typein line     K /# @ $$// J/@/        ; store in track 11LR (chars J/) loads in cols /E @A 
typein line     YTP
typein routine1 Prog/TRANS.1.txt  S4
typein routine2 Prog/TRANS.1.txt  S5
typein line     Y//
typein line     Z
typein line     $$$$$$//////

typein line     //////CCCCCC///////////
typein line     K /# : TRANSLATE/TWO///
typein line     K /# @ $$// K/@/        ; store in track 15LR (chars K/) loads in cols /E @A 
typein line     YTP
typein routine1 Prog/TRANS.2.txt  S4
typein routine2 Prog/TRANS.2.txt  S5
typein line     Y//
typein line     Z
typein line     $$$$$$//////

; Scheme B routines to be called from Autocode compiled prog

typein line     //////CCCCCC///////
typein line     K /# A DECOUTPUT///
typein line     K /# @ A@// #E/@        ; store in track 40L (chars #E) loads in cols @A
typein line     YTP
typein routine1 Lib/DECOUTPUTA.txt  S5
typein line     Y//
typein line     Z
typein line     $$$$$$//////

typein line     //////CCCCCC///////
typein line     K /# A PRINT///////
typein line     K /# @ A@// DE/@        ; store in track 41L (chars DE) loads in cols @A
typein line     YTP
typein routine1 Lib/PRINT.txt  S5
typein line     Y//
typein line     Z
typein line     $$$$$$//////

typein line     //////CCCCCC///////
typein line     K /# A DECIMALINPUT
typein line     K /# @ //// RE@/        ; store in track 42LR (chars RE) loads in cols /E @A
typein line     YTP
typein routine1 Lib/B.DECIMAL_INPUT.txt  S4
typein routine2 Lib/B.DECIMAL_INPUT.txt  S5
typein line     Y//
typein line     Z
typein line     $$$$$$//////

typein line     //////CCCCCC///////
typein line     K /# A DECINPUTA///
typein line     K /# @ //// JE@/        ; store in track 43L (chars JE) loads in cols /E @A
typein line     YTP
typein routine1 Lib/DECINPUTA.txt S4
typein routine2 Lib/DECINPUTA.txt S5
typein line     Y//
typein line     Z
typein line     $$$$$$//////

typein line     //////CCCCCC///////
typein line     K /# A SQUAREROOT//
typein line     K /# @ E@// NE/@        ; store in track 44L (chars NE) loads in cols @A
typein line     YTP
typein routine  Lib/SQUAREROOT.txt S5
typein line     Y//
typein line     Z
typein line     $$$$$$//////

; Prepare directory entries 

typein line     //////CCCCCC///////
typein line     K /# A DIRECTORY///

typein line     K /# @ $$// /@@/        ; Autocode user written routine 0 (will reside at track 64)
typein line     K @# @ $$// E@@/        ; Autocode user written routine 1 (                     65)
typein line     K :# @ $$// @@@/        ; Autocode user written routine 2 (and so on)
typein line     K I# @ $$// A@@/        ; Autocode user written routine 3
typein line     K ## @ $$// :@@/        ; Autocode user written routine 4
typein line     K R# @ $$// S@@/        ; Autocode user written routine 5
typein line     K N# @ $$// I@@/        ; Autocode user written routine 6
typein line     K C# @ $$// U@@/        ; Autocode user written routine 7
typein line     K T# @ $$// #@@/        ; Autocode user written routine 8
typein line     K L# @ $$// D@@/        ; Autocode user written routine 9
typein line     K H# @ $$// R@@/        ; Autocode user written routine R
typein line     K P# @ $$// J@@/        ; Autocode user written routine J
typein line     K O# @ $$// N@@/        ; Autocode user written routine N
typein line     K G# @ $$// F@@/        ; Autocode user written routine F
typein line     K M# @ $$// C@@/        ; Autocode user written routine C
typein line     K V# @ $$// K@@/        ; Autocode user written routine K
typein line     K /D @ $$// T@@/        ; Autocode user written routine T 
typein line     K @D @ $$// Z@@/        ; Autocode user written routine Z 
typein line     K :D @ $$// Z@@/        ; Autocode user written routine L 

typein line     K ID @ /@// JE@/        ; Autocode routine W DECINPUT/A cue to input signed fractions (to AL)
typein line     K #D @ Y@// JE@/        ; Autocode routine H DECINPUT/A cue to input signed integer (to AL)
typein line     K RD @ AA// DE/@        ; Autocode routine Y PRINT CR LF, clear Acc
typein line     K ND @ RA// DE/@        ; Autocode routine P PRINT INTEGER (from AL), then space, clear Acc
typein line     K CD @ HA// DE/@        ; Autocode routine Q PRINT NUMBER WITH DECIMALS (AM.AL), then CR LF, clear Acc
typein line     K TD @ $$// FE@/        ; Autocode routine O DIVISION return AL=x/AL, assuming x@MI and y@VI 

typein line     K LD @ $E// NE/@        ; routine B SQUAREROOT
typein line     K HD @ //// RE@/        ; routine G DECIMAL INPUT
typein line     K PD @ A@// #E/@        ; routine " DECOUTPUT/A 
typein line     K OD @ $$// ////        ; routine M
typein line     K GD @ $$// ////        ; routine X

typein line     K MD @ E/// /A@E        ; routine V Start SchemeB
typein line     K VD @ $$// F/@/        ; routine $ Autocode START routine 

typein line     YTP

det Perforator 

echo
echo ***
echo *** Load Drum-Resident Scheme B 
echo ***
echo

if "%1"=="DEBUG" set debug -n -q debug.txt

att -n -q drum GAutocode.drm

; load drum with Basic SchemeB routines
; These are protected routines -> write is disabled for
; tracks 96-97 where these routines resides
load ../SchemeB/DrumIsolated/B.INPUT.txt
load ../SchemeB/DrumIsolated/B.PERM.txt

echo
echo
echo ***
echo *** Start Computer
echo *** Load Autocode Compiler tape into Drum
echo ***
echo

set cpu KEC
; Hand switches must all be set to /A@/ in order to load Scheme B from drum
dep H /A@/

; load Drum with routines
; attach compound tape and process it
; set ptr echo

; load Drum with Autocode routines
att -q ptr Tapes/GAutoCode.pt.txt

; SchemeB INPUT will load autocode tape into drum
go -q

; now make the drum non persistent so test programs will not be saved on 
; simulation end
set drum nopersistent

echo
echo ***
echo *** Run Autocode Compiler 
echo ***
echo

if "%1"=="DEBUG" set debug -n -q debug.txt

set cpu KEC
; Hand switches must all be set to F/@/ in order to load Autocode from drum
dep H F/@/

; enter a program using FEEDPTR

feedptr  A@AE/B@S:/C@SE/              ; define A=var at [AE, :E], B=const from PERM=4, C=var at [SE, IE]
feedptr  FRACTIONS/+25"A/+0"C//////   ; initialize A=0.25, C=0
feedptr  +C/+AB/                      ; calc AM=A*B=0.25*4=1.0
feedptr  SUBROUTINE/Q/                ; call DECOUTPUT/A routine to print AM as int, AL as fract
feedptr  CLOSE/                       ; return to caller
feedptr  WRITE/1                      ; save this programme as autocode routine 1
feedptr  START/1                      ; run autocode routine 1
go

; should print 
; +0.999999999

; enter a program using already prepared Paper tape

set cpu KEC
dep H F/@/
att -q ptr Validation/Test01.pt.txt
go

; should print 
; +2. +2.

; enter a program using perforator from an autocode source prog in autocode format

set cpu KEC
dep H F/@/
att -q -n Perforator Tapes/GAutoCode_prog.pt.txt
typein -q GAutocode source Validation/Test02.ga.txt
det -q Perforator
att -q ptr Tapes/GAutoCode_prog.pt.txt
go

; should print 
; +0.249999999
; +0.499999999     0.5=sqrt(0.25)

; prepare autocode division routine (written in autocode)

att -q -n Perforator Tapes/GAutoCode_prog.pt.txt
typein -q GAutocode source Lib/DIVISION.ga.txt
det -q Perforator

; Boot to scheme B, call in compiler

set cpu KEC
; SchemeB PERM (H set to /A@/)
dep H /A@/

; needed to avoid att ptr clearing the feed ptr buffer
det -q ptr  

; call in autocode compiler from Scheme B (as ad-routine)
feedptr  QVE

; attach prog to compile (DIVISION routine)
att -q ptr Tapes/GAutoCode_prog.pt.txt
go

; on end of compilation, we prepare and attach next routine to be compiled
; will be the test the DIVISION routine with Prog2.ga.txt
att -q -n Perforator Tapes/GAutoCode_prog.pt.txt
typein -q GAutocode source Validation/Test03.ga.txt
det -q Perforator
att -q ptr Tapes/GAutoCode_prog.pt.txt
; we resume autocode compiler
go

; Test03.ga.txt source ends with call to SchemeB, 
; so after compiling routine, SchemeB resumes paper tape
; input here (expecting warning chars)

; so we add there the call-in of routine 1 as test 
; as routine 1 ends with CLOSE, we call it as subroutine
; (not as adroutine) using warning char G instead of Q

feedptr  G@/
feedptr  .0030+
feedptr  .0500+
go

; should print 
; +0.002999999
; +0.049999999
; +0.059999999      0.06=0.003/0.05
det -q all

; here more warning chars can follow

:end
