

set console -n -q log=console.txt 
set debug -n -q debug.txt

set cpu debug=CMD;DATA;DETAIL;EXP

echo
echo
echo *** Simple Arithmetic test
echo

; Programmer handbook, third edition
; p1.14, example 1

dep -M 0 /CT#    ; A=x                          A=S                     A=[448]     =100
dep -M 1 @CTC    ; A=x+y                        A=A+(sign extended S)   A=A+[450]   =A+120=100+120=220
dep -M 2 IC/S    ; copy x+y into IC             S=AL                    [454]=AL    =220
dep -M 3 ICTC    ; A=2(x+y)                     A=A+(sign extended S)   A=A+[454]   =A+220=220+220=440
dep -M 4 :CTN    ; A=2(x+y)-z                   A=A-(sign extended S)   A=A-[452]   =A-30=440-30=410
dep -M 5 #CTA    ; transfer 2(x+y)-z to ½C      S=AL, Clear A           [456]=AL    =410
dep -M 6 #CT/    ; A=x unsigned                 AL=S, clear AM          A=[456]     =410
dep -M 7 //TE    ; undef opcode to force stop   

ex -M 0-6

dep 448 100      ; [/C]=x=100
dep 450 120      ; [@C]=y=120
dep 452 30       ; [:C]=z=30

dep C 0
go
; A=2(x+y)-z=410
ex AL
if AL==410 goto ok_simple_arith
echo Error Simple Arith
goto end
:ok_simple_arith
echo Test Ok

echo
echo
echo *** Multiplier tests
echo

; Programmer handbook, third edition
; p1.15, example 2

dep -M 0 /CT:    ; Clear Acc                    A=0                     
dep -M 1 @C/K    ; D=y                          D=S signed              D=[450]     =120
dep -M 2 /C/F    ; A=xy                         A=A+D*S signed          A=A+D*[448] =0+120*100=12000
dep -M 3 :C/F    ; A=xy+yz                      A=A+D*S signed          A=A+D*[452] =12000+120*30=15600
dep -M 4 /C/F    ; A=2xy+yz                     A=A+D*S signed          A=A+D*[448] =15600+120*100=27600
dep -M 5 :C/F    ; A=2(xy+yz)                   A=A+D*S signed          A=A+D*[452] =27600+120*30=31200
dep -M 6 /C/K    ; D=x                          D=S signed              D=[448]     =100
dep -M 7 :C/D    ; A=2(xy+yz)-xz                A=A-D*S signed          A=A-D*[452] =31200-100*30=28200
dep -M 8 //TE    ; undef opcode to force stop   

ex -M 0-9

dep 448 100      ; [/C]=x=100
dep 450 120      ; [@C]=y=120
dep 452 30       ; [:C]=z=30

dep C 0
go
; A=2(xy+yz)-xz=28200
ex al
if AL==28200 goto ok_mult1
echo Error Mult test 1
goto end
:ok_mult1
echo Test Ok

dep 448 100      ; [/C]=x=100
dep 450 120      ; [@C]=y=120
dep 452 -30      ; [:C]=z=-30
dep 453  -1

dep C 0
go
; A=2(xy+yz)-xz=19800
ex al
if AL==19800 goto ok_mult2
echo Error Mult test 2
goto end
:ok_mult2
echo Test Ok

echo
echo
echo *** B index tests
echo

; Programmer handbook, third edition
; p1.20, example 3

dep -M 166 ////  ; [IS]=0
dep -M 167 ///T  ; [US]=1..0 (20 bits)
dep -M 131 @///  ; [A:]=2

dep -M 0 L///    ; =18   
dep -M 1 IST/    ; set round off                A=S signed              D=[450]     =120
dep -M 2 //QO    ; set B7=L///                  B=S                     B7=[0]      =18
dep -M 3 /NUK    ; add product to  |            D=S signed              D=[       
dep -M 4 /FUF    ; partial sum     | cycle      A=A-D*S signed
dep -M 5 A:QG    ; reduce B7 by 2  | 10 times   A=A+S signed
dep -M 6 A:/T    ; test for last cycle          if B>=0 then C=S
dep -M 7 /C/A    ; transfer result              S=AM, clear AM
dep -M 8 //TE    ; undef opcode to force stop   

dep C 1
go

